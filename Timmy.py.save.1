#Afrian J. & Jeremy C.
#Timmy (follower) code
#Combine sonar detection with movement

import RPi.GPIO as GPIO, sys, threading, time

#removes the annoying warnings 
GPIO.setwarnings(False)

#use physical pin numbering
GPIO.setmode(GPIO.BOARD)

#use pwm on inputs so motors don't go too fast
# Pins 19, 21 Right Motor
# Pins 24, 26 Left Motor
GPIO.setup(19, GPIO.OUT)
p=GPIO.PWM(19, 20)
p.start(0)
GPIO.setup(21, GPIO.OUT)
q=GPIO.PWM(21, 20)
q.start(0)
GPIO.setup(24, GPIO.OUT)
a=GPIO.PWM(24,20)
a.start(0)
GPIO.setup(26, GPIO.OUT)
b=GPIO.PWM(26,20)
b.start(0)

#Sonar Pins
front = 8
echoR = 07
triggerR = 22
echoL = 11
triggerL = 18

def Sonar(trigger, echo):
   GPIO.setup(trigger, GPIO.OUT)
   GPIO.output(trigger, True)
   time.sleep(0.00001)
   GPIO.output(trigger, False)
   start = time.time()
   count = time.time()
   GPIO.setup(echo, GPIO.IN)
   while GPIO.input(echo)==0 and time.time()-count<0.1:
      start = time.time()
   stop=time.time()
   while GPIO.input(echo)==1:
      stop = time.time()
   # Calculate pulse length
   elapsed = stop-start
   # Distance pulse travelled in that time is time
   # multiplied by the speed of sound (cm/s)
   distance = elapsed * 34000
   # That was the distance there and back so halve the value
   distance = distance / 2
   return distance

def forward(speed):
  p.ChangeDutyCycle(speed)
  q.ChangeDutyCycle(0)
  a.ChangeDutyCycle(speed)
  b.ChangeDutyCycle(0)
  print('forward')

def reverse(speed):
  p.ChangeDutyCycle(0)
  q.ChangeDutyCycle(speed)
  a.ChangeDutyCycle(0)
  b.ChangeDutyCycle(speed)
  print('backwards')

def turnleft(speed):
#p & q= right wheel
#a & b= left wheel
  p.ChangeDutyCycle(speed)
  q.ChangeDutyCycle(0)
  a.ChangeDutyCycle(speed)
  b.ChangeDutyCycle(0)
  print('left')

def turnright(speed):
  p.ChangeDutyCycle(0)
  q.ChangeDutyCycle(speed)
  a.ChangeDutyCycle(speed)
  b.ChangeDutyCycle(0)
  print('right')

def stopall():
  p.ChangeDutyCycle(0)
  q.ChangeDutyCycle(0)
  a.ChangeDutyCycle(0)
  b.ChangeDutyCycle(0)
  print('stop')

def follow():
   try:
      while True:
         frontDist = Sonar(front, front)
         rightDist = Sonar(triggerR,echoR)
         leftDist = Sonar(triggerL, echoL)
         tooclose = 10
         print 'front:', str(frontDist) + ' right:', str(rightDist) + ' left:', str(leftDist)
         adjspeed = int(frontDist)
         if adjspeed > 100:
            adjspeed = 100
         print 'speed: ', str(adjspeed)
         if frontDist > tooclose and rightDist > tooclose and leftDist > tooclose:
            forward(adjspeed)
         elif frontDist < tooclose and rightDist > tooclose and leftDist > tooclose:
            reverse(20)
            time.sleep(0.3)
         else:
            if rightDist <= tooclose and leftDist >= tooclose:
               turnleft(20)
            elif rightDist >= tooclose and leftDist <= tooclose:
               turnright(20)
   
except KeyboardInterrupt:
      GPIO.cleanup()
